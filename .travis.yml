dist: trusty
osx_image: xcode8
sudo: false

language: cpp

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

cache:
  pip: true
  directories:
    - $HOME/.pip-cache/

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.6
      - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-4.0 main'
      - key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'
    packages:
      - gcc-4.9
      - g++-4.9
      - clang-3.6
      - clang-format-4.0
      - cmake
      - git
      # Optional dependencies
      - libtbb-dev
      # coveralls dependencies
      - gem
      - lcov
      # caffe-importer dependencies
      - libprotobuf-dev
      - protobuf-compiler

branches:
  only:
    - master
    - feat/xtensor_integration
    - feat/decouple_activations

env:
  global:
    - USE_TBB=ON              # only OFF for clang on linux
    - USE_SSE=OFF
    - USE_AVX=OFF
    - USE_DOUBLE=OFF
    - BUILD_EXAMPLES=OFF
    - BUILD_TESTS=OFF
    - COVERALLS=OFF           # only ON for gcc on linux
    - USE_ASAN=OFF            # only ON for gcc on linux
    - CLANG_FORMAT_CHECK=OFF  # only ON for one job

  matrix:
    - BUILD_TESTS=ON
    - BUILD_TESTS=ON USE_SSE=ON USE_AVX=ON
    - BUILD_TESTS=ON USE_SSE=ON USE_AVX=ON USE_DOUBLE=ON
    - BUILD_EXAMPLES=ON

matrix:
  include:
    # Only do a clang format check
    - os: linux
      compiler: clang
      env: CLANG_FORMAT_CHECK=ON

  exclude:
    - os: osx
      compiler: gcc

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
       export CC="gcc-4.9";
       export CXX="g++-4.9";
    fi
  - gcc --version
  - g++ --version

install:
  - bash -x .travis/install.sh
  - gem install coveralls-lcov

before_script:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++-4.9" ]; then
      export USE_ASAN="ON";
      export COVERALLS="ON";
      lcov --directory . --zerocounters;
    fi

  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "clang++" ]; then
      export USE_TBB="OFF";
    fi

  - cmake -DUSE_TBB=$USE_TBB
          -DUSE_SSE=$USE_SSE
          -DUSE_AVX=$USE_AVX
          -DUSE_DOUBLE=$USE_DOUBLE
          -DBUILD_EXAMPLES=$BUILD_EXAMPLES
          -DBUILD_TESTS=$BUILD_TESTS
          -DCOVERALLS=$COVERALLS
          -DUSE_ASAN=$USE_ASAN .;

script:
  - if [ "$BUILD_TESTS" == "ON" ]; then
      make -j2 generated_proto;
      make -j2 tiny_dnn_test;
      test/tiny_dnn_test;
    fi

  - if [ "$BUILD_EXAMPLES" == "ON" ]; then
      make -j2 examples_all;
    fi

  - if [ "$CLANG_FORMAT_CHECK" == "ON" ]; then
      make clang-format-check;
    fi

after_success:
  - if [ "$COVERALLS" == "ON" ]; then
      lcov --directory . --capture --output-file coverage.info;
      lcov --remove coverage.info 'test/*' 'third_party/*' 'cereal/*' '/usr/*' 'tiny_dnn/io/caffe/caffe.pb.*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --source-encoding=ISO-8859-1 coverage.info;
    fi
